(neg? 0)
(pos? 0)
(get-all '[1 2 3'])
(get-all '[1 2 3])
(day2.core/get-all '[1 2 3 ])
(mapv valid? (day2.core/get-all '[1 2 3 ]))
(mapv day2.core/valid? (day2.core/get-all '[1 2 3 ]))
(any (mapv day2.core/valid? (day2.core/get-all '[1 2 3 ])))
(or (mapv day2.core/valid? (day2.core/get-all '[1 2 3 ])))
(and (mapv day2.core/valid? (day2.core/get-all '[1 2 3 ])))
 (mapv day2.core/valid? (day2.core/get-all '[1 2 3 ]))
(any? (mapv day2.core/valid? (day2.core/get-all '[1 2 3 ])))
(day2.core/jump-size '[1 2 3 4 5])
(day2.core/jump-size '[ (1 2) (2 3) (3 4) ])
(day2.core/valid? '[ (1 2) (2 3) (3 4) ])
(day2.core/valid? '[ 1 2 3 4  ])
(day2.core/valid? '[ 1 2 3 4] )
(partition 2 1 '[1 2 3 4 5])
(day2.core/valid? '[ 1 2 3 4] )
(day2.core/get-all '[1 2 7 8 9])
(map valid? (day2.core/get-all '[1 2 7 8 9]))
(map day2.core/valid? (day2.core/get-all '[1 2 7 8 9]))
(map day2.core/valid? (day2.core/get-all '[7 6 4 2 1]))
(map day2.core/valid? (day2.core/get-all '[1 2 7 8 9]))
(any? (map day2.core/valid? (day2.core/get-all '[1 2 7 8 9])))
 (map day2.core/valid? (day2.core/get-all '[1 2 7 8 9]))
(every? (map day2.core/valid? (day2.core/get-all '[1 2 7 8 9])))
(some true?  (map day2.core/valid? (day2.core/get-all '[1 2 7 8 9])))
(def a "xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))")
a
(re-seq #"don't" a)
(re-seq #"[don't\(\)|do\(\)]" a)
(re-seq #"don't\(\)|do\(\)" a)
(re-seq #"(don't\(\)|do\(\))" a)
(re-seq #"(don't\(\)|do\(\)|mult\(\d+,\d+\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\d+,\d+\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\(d+),\(d+)\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\(d+),\((d+)\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\(d+),(d+)\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\((d+),(d+)\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(d+,d+\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\d+,d+\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\d+,\d+\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\((\d+),(\d+)\))" a)
(re-seq #"(?don't\(\)|do\(\)|mul\((\d+),(\d+)\))" a)
(re-seq #"(?:don't\(\)|do\(\)|mul\((\d+),(\d+)\))" a)
(re-seq #"(?:mul\((\d+),(\d+)\))" a)
(re-seq #"(?:mul\((\d+),(\d+)\))|do" a)
(re-seq #"(?:don't\(\)|do\(\)|mul\((\d+),(\d+)\))" a)
(= "a" "a")
(= "a" "av")
(pprint "a")
(pprint a)
(- 1 5)
(- 5 1)
