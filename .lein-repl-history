(neg? 0)
(pos? 0)
(get-all '[1 2 3'])
(get-all '[1 2 3])
(day2.core/get-all '[1 2 3 ])
(mapv valid? (day2.core/get-all '[1 2 3 ]))
(mapv day2.core/valid? (day2.core/get-all '[1 2 3 ]))
(any (mapv day2.core/valid? (day2.core/get-all '[1 2 3 ])))
(or (mapv day2.core/valid? (day2.core/get-all '[1 2 3 ])))
(and (mapv day2.core/valid? (day2.core/get-all '[1 2 3 ])))
 (mapv day2.core/valid? (day2.core/get-all '[1 2 3 ]))
(any? (mapv day2.core/valid? (day2.core/get-all '[1 2 3 ])))
(day2.core/jump-size '[1 2 3 4 5])
(day2.core/jump-size '[ (1 2) (2 3) (3 4) ])
(day2.core/valid? '[ (1 2) (2 3) (3 4) ])
(day2.core/valid? '[ 1 2 3 4  ])
(day2.core/valid? '[ 1 2 3 4] )
(partition 2 1 '[1 2 3 4 5])
(day2.core/valid? '[ 1 2 3 4] )
(day2.core/get-all '[1 2 7 8 9])
(map valid? (day2.core/get-all '[1 2 7 8 9]))
(map day2.core/valid? (day2.core/get-all '[1 2 7 8 9]))
(map day2.core/valid? (day2.core/get-all '[7 6 4 2 1]))
(map day2.core/valid? (day2.core/get-all '[1 2 7 8 9]))
(any? (map day2.core/valid? (day2.core/get-all '[1 2 7 8 9])))
 (map day2.core/valid? (day2.core/get-all '[1 2 7 8 9]))
(every? (map day2.core/valid? (day2.core/get-all '[1 2 7 8 9])))
(some true?  (map day2.core/valid? (day2.core/get-all '[1 2 7 8 9])))
(def a "xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))")
a
(re-seq #"don't" a)
(re-seq #"[don't\(\)|do\(\)]" a)
(re-seq #"don't\(\)|do\(\)" a)
(re-seq #"(don't\(\)|do\(\))" a)
(re-seq #"(don't\(\)|do\(\)|mult\(\d+,\d+\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\d+,\d+\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\(d+),\(d+)\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\(d+),\((d+)\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\(d+),(d+)\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\((d+),(d+)\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(d+,d+\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\d+,d+\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\d+,\d+\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\((\d+),(\d+)\))" a)
(re-seq #"(?don't\(\)|do\(\)|mul\((\d+),(\d+)\))" a)
(re-seq #"(?:don't\(\)|do\(\)|mul\((\d+),(\d+)\))" a)
(re-seq #"(?:mul\((\d+),(\d+)\))" a)
(re-seq #"(?:mul\((\d+),(\d+)\))|do" a)
(re-seq #"(?:don't\(\)|do\(\)|mul\((\d+),(\d+)\))" a)
(= "a" "a")
(= "a" "av")
(pprint "a")
(pprint a)
(- 1 5)
(- 5 1)
(def a [75 47 61 53 29])
(index-of a 53)
(find 61 a)
(find a 61)
(.indexOf a 61)
(< 3 5)
(for [x (range 0 2) y (range 0 5)] (println x y))
(length a)
(defn a '[1 2 3 4 5])
(def a '[1 2 3 4 5])
a
(count a)
(/ (count a) 2)
(floor (/ (count a) 2))
(Math/floor  (/ (count a) 2))
(Math/round  (/ (count a) 2))
(Math/ceil  (/ (count a) 2))
(Math/ceil  (/ 3 2))
(/ 3 2)
(//3 2)
(Math/ceil  (/ (count a) 2))
(+ 1  (/ (count a) 2))
(int  (/ (count a) 2))
(+ 1 (int  (/ (count a) 2)))
(def b '[1 2 3])
(+ 1 (int  (/ (count b) 2)))
(+ 1 (int  (/ (count a) 2)))
(int  (/ (count a) 2))
(int  (/ (count b) 2))
(def a '[1 2 3 4'])
(def a '[1 2 3 4])
a
(update a 0 10)
(mapv #(println %1 %2) (range 0 3) (range 4 6))
(mapv #(println %1 %2) (range 0 3) (range 4 7))
(mapv #(println %1 %2) (range 0 3) (range 4 70))
(> 1 -1)
(def a '[ [1 2 3] [4 5 6] ])
(assoc-in a [0 0] "a")
(assoc-in a [1 0] "a")
(assoc-in a [1 0] "#")
(count a)
(def a '[ [1 2 3] [4 5 6] [ 7 8 9]])
a
(count a)
(def a '[ [1 2 3] [4 5 6] [ 7 8 9] [10 11 12]])
(count a)
(count (first a))
(get-in a [0 0])
(= 1 (get-in a [0 0]))
(> 500 1000)
(> 5001 1000)
(def a '[ [1 2 3] [4 5 6] [ 7 8 9] [10 11 12]])
(assoc-in a [0 0] "x")
(day6.core/update-map a [0 0])
(day6.core/update-map a 0 0)
(day6.core/update-map a [0 1] 0)
(day6.core/update-map a 1 0)
(count a)
a
(get-in [4 0])
(get-in a [4 0])
(get-in a [3 0])
(-1 5)
(- 1 5)
(count a)
(dec (count a))
(get-in a  [3 0])
a
(day6.core/in-bounds [3 0] 3 3)
(day6.core/in-bounds [4 0] 3 3)
(day6.core/in-bounds [3 5] 3 3)
(day6.core/in-bounds [3 4] 3 3)
(get-in a [3 3])
(get-in a [3 2])
(<= 2 3)
(<= 3 3)
