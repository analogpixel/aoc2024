(neg? 0)
(pos? 0)
(get-all '[1 2 3'])
(get-all '[1 2 3])
(day2.core/get-all '[1 2 3 ])
(mapv valid? (day2.core/get-all '[1 2 3 ]))
(mapv day2.core/valid? (day2.core/get-all '[1 2 3 ]))
(any (mapv day2.core/valid? (day2.core/get-all '[1 2 3 ])))
(or (mapv day2.core/valid? (day2.core/get-all '[1 2 3 ])))
(and (mapv day2.core/valid? (day2.core/get-all '[1 2 3 ])))
 (mapv day2.core/valid? (day2.core/get-all '[1 2 3 ]))
(any? (mapv day2.core/valid? (day2.core/get-all '[1 2 3 ])))
(day2.core/jump-size '[1 2 3 4 5])
(day2.core/jump-size '[ (1 2) (2 3) (3 4) ])
(day2.core/valid? '[ (1 2) (2 3) (3 4) ])
(day2.core/valid? '[ 1 2 3 4  ])
(day2.core/valid? '[ 1 2 3 4] )
(partition 2 1 '[1 2 3 4 5])
(day2.core/valid? '[ 1 2 3 4] )
(day2.core/get-all '[1 2 7 8 9])
(map valid? (day2.core/get-all '[1 2 7 8 9]))
(map day2.core/valid? (day2.core/get-all '[1 2 7 8 9]))
(map day2.core/valid? (day2.core/get-all '[7 6 4 2 1]))
(map day2.core/valid? (day2.core/get-all '[1 2 7 8 9]))
(any? (map day2.core/valid? (day2.core/get-all '[1 2 7 8 9])))
 (map day2.core/valid? (day2.core/get-all '[1 2 7 8 9]))
(every? (map day2.core/valid? (day2.core/get-all '[1 2 7 8 9])))
(some true?  (map day2.core/valid? (day2.core/get-all '[1 2 7 8 9])))
(def a "xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))")
a
(re-seq #"don't" a)
(re-seq #"[don't\(\)|do\(\)]" a)
(re-seq #"don't\(\)|do\(\)" a)
(re-seq #"(don't\(\)|do\(\))" a)
(re-seq #"(don't\(\)|do\(\)|mult\(\d+,\d+\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\d+,\d+\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\(d+),\(d+)\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\(d+),\((d+)\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\(d+),(d+)\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\((d+),(d+)\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(d+,d+\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\d+,d+\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\(\d+,\d+\))" a)
(re-seq #"(don't\(\)|do\(\)|mul\((\d+),(\d+)\))" a)
(re-seq #"(?don't\(\)|do\(\)|mul\((\d+),(\d+)\))" a)
(re-seq #"(?:don't\(\)|do\(\)|mul\((\d+),(\d+)\))" a)
(re-seq #"(?:mul\((\d+),(\d+)\))" a)
(re-seq #"(?:mul\((\d+),(\d+)\))|do" a)
(re-seq #"(?:don't\(\)|do\(\)|mul\((\d+),(\d+)\))" a)
(= "a" "a")
(= "a" "av")
(pprint "a")
(pprint a)
(- 1 5)
(- 5 1)
(def a [75 47 61 53 29])
(index-of a 53)
(find 61 a)
(find a 61)
(.indexOf a 61)
(< 3 5)
(for [x (range 0 2) y (range 0 5)] (println x y))
(length a)
(defn a '[1 2 3 4 5])
(def a '[1 2 3 4 5])
a
(count a)
(/ (count a) 2)
(floor (/ (count a) 2))
(Math/floor  (/ (count a) 2))
(Math/round  (/ (count a) 2))
(Math/ceil  (/ (count a) 2))
(Math/ceil  (/ 3 2))
(/ 3 2)
(//3 2)
(Math/ceil  (/ (count a) 2))
(+ 1  (/ (count a) 2))
(int  (/ (count a) 2))
(+ 1 (int  (/ (count a) 2)))
(def b '[1 2 3])
(+ 1 (int  (/ (count b) 2)))
(+ 1 (int  (/ (count a) 2)))
(int  (/ (count a) 2))
(int  (/ (count b) 2))
(def a '[1 2 3 4'])
(def a '[1 2 3 4])
a
(update a 0 10)
(mapv #(println %1 %2) (range 0 3) (range 4 6))
(mapv #(println %1 %2) (range 0 3) (range 4 7))
(mapv #(println %1 %2) (range 0 3) (range 4 70))
(> 1 -1)
(def a '[ [1 2 3] [4 5 6] ])
(assoc-in a [0 0] "a")
(assoc-in a [1 0] "a")
(assoc-in a [1 0] "#")
(count a)
(def a '[ [1 2 3] [4 5 6] [ 7 8 9]])
a
(count a)
(def a '[ [1 2 3] [4 5 6] [ 7 8 9] [10 11 12]])
(count a)
(count (first a))
(get-in a [0 0])
(= 1 (get-in a [0 0]))
(> 500 1000)
(> 5001 1000)
(def a '[ [1 2 3] [4 5 6] [ 7 8 9] [10 11 12]])
(assoc-in a [0 0] "x")
(day6.core/update-map a [0 0])
(day6.core/update-map a 0 0)
(day6.core/update-map a [0 1] 0)
(day6.core/update-map a 1 0)
(count a)
a
(get-in [4 0])
(get-in a [4 0])
(get-in a [3 0])
(-1 5)
(- 1 5)
(count a)
(dec (count a))
(get-in a  [3 0])
a
(day6.core/in-bounds [3 0] 3 3)
(day6.core/in-bounds [4 0] 3 3)
(day6.core/in-bounds [3 5] 3 3)
(day6.core/in-bounds [3 4] 3 3)
(get-in a [3 3])
(get-in a [3 2])
(<= 2 3)
(<= 3 3)
(or true false)
(or 1 2)
(or 2 1)
(or false false 1)
(day7.core/placement 190 [10 19])
(day7.core/placement 190 [10 19 1])
(day7.core/placement 190 [10 19 1 2])
(day7.core/placement 190 [10 19])
(day7.core/placement 190 [10 19 1])
(day7.core/placement 190 [10 19 11])
(day7.core/placement 190 [10 19 11 12])
(Integer/parseUnsignedInt "77502824880")
(Double/parseDouble "77502824880")
(bigint "77502824880")
(= (bigint "77502824880") Last login: Fri Dec  6 10:13:20 on ttys001
[0] 0 {~}  11:22>cd aoc2024/
[0] 0 {~/aoc2024} (master) 11:22>ls
day1.clj                day5.clj                day_2_data.txt          day_3_sample_data_2.txt day_5_sample_data.txt   target
day2.clj                day6.clj                day_2_sample_data.txt   day_4_data.txt          day_6_data.txt          template.clj
day3.clj                day_1_data.txt          day_3_data.txt          day_4_sample_data.txt   day_6_sample_data.txt
day4.clj                day_1_sample_data.txt   day_3_sample_data.txt   day_5_data.txt          project.clj
[0] 0 {~/aoc2024} (master) 11:22>cp template.clj day7.clj
[0] 0 {~/aoc2024} (master) 11:22>vi day_7_sample_data.txt
[0] 0 {~/aoc2024} (master) 11:22>lein repl
nREPL server started on port 61439 on host 127.0.0.1 - nrepl://127.0.0.1:61439
REPL-y 0.5.1, nREPL 1.0.0
Clojure 1.11.1
OpenJDK 64-Bit Server VM 23
    Docs: (doc function-name-here)
          (find-doc "part-of-name-here")
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e
user=> (or true false)
true
user=> (or 1 2)
1
user=> (or 2 1)
2
user=> (or false false 1)
1
user=> (day7.core/placement 190 [10 19])
Execution error (IllegalStateException) at user/eval20652 (form-init12858403200306315989.clj:1).
Attempting to call unbound fn: #'day7.core/placement
user=> (day7.core/placement 190 [10 19])
Execution error (IllegalStateException) at user/eval20684 (form-init12858403200306315989.clj:1).
Attempting to call unbound fn: #'day7.core/placement
user=> (day7.core/placement 190 [10 19])
Execution error (IllegalStateException) at user/eval20744 (form-init12858403200306315989.clj:1).
Attempting to call ufn: #'day7.core/placement
user=> (day7.core/placement 190 [10 19])
Execution error (NullPointerException) at day7.core/placement$can-total? (form-init12858403200306315989.clj:18).
Cannot invoke "Object.getClass()" because "x" is null
user=> (day7.core/placement 190 [10 19])
Execution error (NullPointerException) at day7.core/placement$can-total? (form-init12858403200306315989.clj:18).
Cannot invoke "Object.getClass()" because "x" is null
user=> Bye for now!
[0] 0 {~/aoc2024} (master) 13:49>lein repl
nREPL server started on port 62593 on host 127.0.0.1 - nrepl://127.0.0.1:62593
REPL-y 0.5.1, nREPL 1.0.0
Clojure 1.11.1
OpenJDK 64-Bit Server VM 23
    Docs: (doc function-name-here)
          (find-doc "part-of-name-here")
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e
user=> (day7.core/placement 190 [10 19])
Execution error (ClassNotFoundException) at java.net.URLClassLoader/fia:445).
day7.core
user=> (day7.core/placement 190 [10 19])
Execution error (NullPointerException) at day7.core/placement$can-total? (form-init15879631822193205570.clj:18).
Cannot invoke "Object.getClass()" because "x" is null
user=> (day7.core/placement 190 [10 19])
true
user=> (day7.core/placement 190 [10 19 1])
true
user=> (day7.core/placement 190 [10 19 1])
true
user=> (day7.core/placement 190 [10 19 1 2])
true
user=> (day7.core/placement 190 [10 19 1 2])
false
user=> (day7.core/placement 190 [10 19])
true
user=> (day7.core/placement 190 [10 19])
true
user=> (day7.core/placement 190 [10 19 1])
true
user=> (day7.core/placement 190 [10 19 1])
true
user=> (day7.core/placement 190 [10 19 11])
false
user=> (day7.core/placement 190 [10 19 11 12])
false
user=> (day7.core/placement 190 [10 19 11 12])
false
user=> (Inte
Integer                InternalError          InterruptedException
user=> (Integer/
Integer/BYTES                   Integer/MAX_VALUE               Integer/MIN_VALUE               Integer/SIZE    r/TYPE                    Integer/bitCount                Integer/compare
Integer/compareUnsigned         Integer/compress                Integer/decode                  Integer/digits                  Integer/divideUnsigned          Integer/expand                  Integer/getInteger
Integer/hashCode                Integer/highestOneBit           Integer/lowestOneBit            Integer/max                     Integer/min                     Integer/numberOfLeadingZeros    Integer/numberOfTrailingZeros
Integer/parseInt                Integer/parseUnsignedInt        Integer/remainderUnsigned       Integer/reverse                 Integer/reverseBytes            Integer/rotateLeft              Integer/rotateRight
Integer/serialVersionUID        Integer/signum                  Integer/sum                     Integer/toBinaryString          Integer/toHexString             Integer/toOctalString           Integer/toString
Integer/toUnsignedLong          Integer/toUnsignedString        Integer/valueOf
user=> (Integer/ Integer/MAX_VALUE               Integer/MIN_VALUE               Integer/SIZE                    Integer/TYPE                    Integer/bitCount                Integer/compare
Integer/compareUnsigned         Integer/compress                Integer/decode                  Integer/digits                  Integer/divideUnsigned          Integer/expand                  Integer/getInteger
Integer/hashCode                Integer/highestOneBit           Integer/lowestOneBit            Integer/max                     Integer/min                     Integer/numberOfLeadingZeros    Integer/numberOfTrailingZeros
Integer/parseInt                Integer/parseUnsignedInt        Integer/remainderUnsigned       Integer/reverse                 Integer/reverseBytes            Integer/rotateLeft              Integer/rotateRight
Integer/serialVersionUID        Integer/signum                  Integer/sum                     Integer/toBinaryString          Integer/toHexString             Integer/toOctalString           Integer/tong
Integer/toUnsignedLong          Integer/toUnsignedString        Integer/valueOf
user=> (Integer/parse
Integer/parseInt           Integer/parseUnsignedInt
user=> (Integer/parse
Integer/parseInt           Integer/parseUnsignedInt
user=> (Integer/parse
Integer/parseInt           Integer/parseUnsignedInt
user=> (Integer/parseUnsignedInt "77502824880")
Execution error (NumberFormatException) at java.lang.Integer/parseUnsignedInt (Integer.java:777).
String value 77502824880 exceeds range of unsigned int.
user=> (Double/parseDouble "77502824880")
7.750282488E10
user=> (big
bigdec       bigint       biginteger
user=> (big
bigdec       bigint       biginteger
user=> (bigint
bigint       biginteger
user=> (bigint "77502824880")
77502824880N
(= (bigint "77502824880") 77502824880)
(str 5 4)
